# METEOR TODOAPP TUTORIAL
## Creating your first app
- Meteor默认支持ES6语法

## Defining views with React components
- `client/main.js`中的`Meteor.startup`用来放初始化代码, 当页面准备后会加载这些初始化代码
- Meteor解析项目中的所有HTML文件, 并且识别三个顶层标签, `<head>`, `<body>`, `<template>`
	1. `<head>`
项目中所有`<head>`标签内的内容都会被添加到发送到client的HTML的head部分
	2. `<body>`
项目中所有`<body>`标签内的内容都会被添加到发送到client的HTML的body部分
	3. `<template>`
所有`<template>`的内容被解析为Meteor templates, 在HTML中, 可以使用`{{>templateName}}`来引用, 在JavaScript中, 可以使用`Template.templateName`来引用

## Storing tasks in a collection
- Collections是Meteor储存持久化数据的方式
- 在Meteor中, client和server都可以使用Collections
使编写业务逻辑变得简单而不需要写大量的server端代码
- Collections会自动更新, 所以依赖这些Collections的view层组件也将自动呈现最新数据
- 通过在JS中调用`MyCollection = new Mongo.Collection("my-collection");`来创建一个新的collection
	- server
在server端使用这个这个代码将建立一个叫做"my-collection"的MongoDB collection
	- client
在client端使用这个代码将建立一个链接到server端collection的缓存
- Tutorial中数据放在`imports/api/task.js`中, 然后在server端的main.js中import这个数据
在server端的main.js中import这个数据, 将会建立一个MongoDB的collection和建立一个client获取数据的管道

### Using data from a collection inside a React component
- 要在React组件中使用Meteor collection的数据, 我们需要安装一个Atmosphere(和NPM类似的包管理工具)包, `react-meteor-data`
这个包可以让我们在React的组件层中创建一个'data container'去获取Meteor的响应式数据, 然后, 要使用`react-meteor-data`, 我们需要使用`createContainer`HOC, 把我们的组件包裹在一个container中
- 在这个tutorial中, 包裹APP的HOC从Tasks collection中获取tasks数据并以props的形式传给App组件
HOC以一种系响应式的方式做这件事, 所以当数据库的内容更新之后, App将重新渲染

### Inserting tasks from the server-side database console
- 在collections中的items称为documents
- 可以使用`meteor mongo`进入数据库的控制台, 在控制台中可以使用mongo命令插入数据`db.tasks.insert({ text: "Hello world!", createdAt: new Date() });`

## Adding tasks with a form
- 在App组件中可以对Tasks(Mongo.Collection)进行操作, 使用`Tasks.insert({ text: "hello world!", createdAt: new Date() })`

### Listening for events in React
- ReactDOM有一个API可以获取DOM节点, `ReactDOM.findDOMNode(this.refs.textInput)`

### Inserting into a collection
- 我们可以给task对象赋予任何属性, 所以我们不需要为collection定义一个schema
这是因为, 在MongoDB中, Collection是动态模式(Dynamic Schema)
- 但是从client无限制的直接向数据库插入任意数据是不安全的

### Sorting our tasks
- 在包裹着App的data container中, 给find增加一个sort option对数据进行分类

## Checking off and deleting tasks
- 在对Tasks进行update操作的时候, 可以动态的增加一个原本没有的属性checked, 这也是MongoDB的强大之处

## Running your app on Android or iOS
- 目前, Meteor在windows上不支持移动端的构建
- Meteor的App被设计成能够跨平台运行的, 包括iOS和Android, website端应用转化成移动端应用只需要几个命令
- 但是需要下载相应的构建工具, iOS则需要Xcode

## Storing temporary UI data in component state
- 这一节将使用React state实现client数据过滤功能
- 因为MiniMongo的数据在client已经有缓存, 所以我们就算在container中增加获取count, 不会涉及服务器的任何东西

## Adding user accounts
- Meteor自带一个账户系统和插件登录的用户界面, 可以在几分钟内为App添加多用户功能
- 当前Meteor用户登录界面使用的UI是Meteor的默认UI引擎Blaze, 未来可能使用特殊的React组件
- 要使用账户系统, 需要添加相关的包, `meteor add accounts-ui accounts-password` 

### Automatic accounts UI
- 在我们的App中有`accounts-ui`这个包, 所以我们需要做得只是添加登录下拉列表包含的UI组件
- 这个下拉列表将发现login methods和显示合适的控件, 在这个Tutorial中, 使用的login methods是`accounts-password`, 所以下拉列表显示password字段

### Getting information about the logged-in user
-  在data container, 可以使用`Meteor.user()`来检查是否有用户登录和获取用户的信息
例如, `Meteor.user().username`包含登录用户的用户名, `Meteor.userId()`获得当前用户的`_id`, 这是Mongo中数据的唯一标识, 所以这也是用户的唯一标识	

## Security with methods
- 在这部分之前, 这个App的任何一个用户可以编辑数据库的任何一部分, 其实在实际的App中需要控制数据库的权限
在Meteor中, 最好的实现方式是使用methods带代替直接操作数据库

### Removing `insecure`
- 每个刚创建的Meteor project都默认有insecure这个包, 这个包允许直接在client操作数据库, 是为了方便原型开发

### Defining methods
- method的定义, 在server端定义可以被client端远程调用的函数
- 在method中, this值被绑定为调用这个方法的对象
- 我们需要一个method来包括在client对数据库的各种操作, 这个method需要定义在client和server都可以执行的地方

### Optimistic UI
- 当我们在client使用`Meteor.call`的时候, 其实有两件事同时发生
	1. client发送request到server在安全的环境下运行method, 就像AJAX请求一样
	2. method直接运行在client的模拟环境来预测server端结果的输入

这意味着, 创建一个最新的任务实际上在结果返回之前已经出现在屏幕上了, 如果client模拟的结果和server返回的结果是一致的, 那么一切就不变, 如果返回的结果和模拟的结果不同, 那么UI会按照server实际返回的状态来打补丁

## Filtering data with publish and subscribe
- publish和subscribe可以用来控制Meteor将发送什么数据到client的数据库, `Meteor.publish`, `Meteor.subscribe`
- 和`insecure`一样, 新的Meteor App默认带有`autopublish`这个包, 这个包可以自动同步所有数据库的内容到client